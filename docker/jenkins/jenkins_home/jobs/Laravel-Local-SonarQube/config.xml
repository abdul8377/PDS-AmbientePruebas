<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1559.va_a_533730b_ea_d">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2273.v643f36ed9e94"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2273.v643f36ed9e94">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4209.v83c4e257f1e9">
    <script>pipeline {
    agent any

    environment {
        // üîπ Ajusta estos nombres seg√∫n tu configuraci√≥n en Jenkins
        SONARQUBE_SERVER = &apos;sonarqube&apos;       // Nombre del servidor SonarQube configurado en &quot;Manage Jenkins &gt; System&quot;
        SONARQUBE_SCANNER = &apos;SonarScanner&apos;   // Nombre del scanner configurado en &quot;Global Tool Configuration&quot;
        LARAVEL_PATH = &apos;/var/jenkins_home/workspace/laravel&apos;  // Ruta donde est√° montado tu proyecto Laravel
    }

    stages {

        stage(&apos;Prepare&apos;) {
            steps {
                echo &apos;üîß Preparando an√°lisis Laravel local...&apos;
                sh &quot;ls -la ${env.LARAVEL_PATH}&quot;
            }
        }

        stage(&apos;SonarQube Analysis&apos;) {
            steps {
                echo &apos;üöÄ Ejecutando an√°lisis SonarQube...&apos;

                // üîπ Carga configuraci√≥n de SonarQube y agrega el scanner al PATH
                withSonarQubeEnv(&quot;${env.SONARQUBE_SERVER}&quot;) {
                    withSonarQubeScannerEnv(&quot;${env.SONARQUBE_SCANNER}&quot;) {
                        dir(&quot;${env.LARAVEL_PATH}&quot;) {
                            sh &apos;&apos;&apos;
                                sonar-scanner \
                                  -Dsonar.projectKey=laravel-app \
                                  -Dsonar.projectName=&quot;Laravel Application&quot; \
                                  -Dsonar.projectVersion=1.0 \
                                  -Dsonar.sourceEncoding=UTF-8 \
                                  -Dsonar.sources=app,routes,config,database \
                                  -Dsonar.exclusions=vendor/**,storage/**,bootstrap/**,public/**,node_modules/** \
                                  -Dsonar.host.url=http://docker.sonar:9000 \
                                  -Dsonar.login=squ_04e1c8241ac31513dc1dd6263b3f4d3cf214214a
                            &apos;&apos;&apos;
                        }
                    }
                }
            }
        }

        stage(&apos;Quality Gate&apos;) {
            steps {
                script {
                    echo &apos;üß† Esperando resultado del Quality Gate...&apos;
                    timeout(time: 3, unit: &apos;MINUTES&apos;) {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
    }

    post {
        success {
            echo &apos;‚úÖ An√°lisis completado correctamente. Revisa SonarQube para ver los resultados.&apos;
        }
        failure {
            echo &apos;‚ùå Fall√≥ el an√°lisis SonarQube. Revisa los logs en la consola Jenkins.&apos;
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>